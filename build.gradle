plugins {
    id 'kotlin-multiplatform' version '1.3.20'
}
repositories {
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}

import org.gradle.internal.os.OperatingSystem

def konanUserDir = System.getenv("KONAN_DATA_DIR") ?: "${System.getProperty("user.home")}/.konan"
def resFile = file("$buildDir/konan/res/kogin.res")

kotlin {

    /* libraries */
    mingwX64('gl') {
        compilations.main {
            cinterops {
                galogen {
                }
            }
        }
    }
    mingwX64('io')
    mingwX64('math')
    mingwX64('utils')
    mingwX64('bf') {
        compilations.main {
            cinterops {
                lz4 {
                }
            }
        }
    }

    /* applications */
    mingwX64('bfinfo') {
        binaries {
            executable('bfinfo') {
                entryPoint = 'bfinfo.main'
                linkerOpts "$resFile"
            }
        }

        compilations.main {
            cinterops {
                glfw {
                }
                galogen {
                }
                lz4 {
                }
            }
        }
    }

    mingwX64('geoconv') {
        binaries {
            executable('geoconv') {
                entryPoint = 'geoconv.main'
                linkerOpts "$resFile"
            }
        }

        compilations.main {
            cinterops {
                lz4 {
                }
            }
        }
    }

    mingwX64('imgconv') {
        binaries {
            executable('imgconv') {
                entryPoint = 'imgconv.main'
                linkerOpts "$resFile"
            }
        }

        compilations.main {
            cinterops {
                stb {
                }
                lz4 {
                }
            }
        }
    }

    mingwX64('mingw') {
        binaries {
            executable('mingw') {
                entryPoint = 'sample.main'
                linkerOpts "$resFile"
            }
        }

        compilations.main {
            cinterops {
                lz4 {
                }
                glfw {
                }
                galogen {
                }
            }
        }
    }

    sourceSets {
        glMain {
            dependsOn mathMain
        }
        bfMain {
            dependsOn ioMain
        }
        bfinfoMain {
            dependsOn mathMain
            dependsOn ioMain
            dependsOn bfMain
            dependsOn glMain
            dependsOn utilsMain
        }
        imgconvMain {
            dependsOn ioMain
            dependsOn bfMain
            dependsOn utilsMain
        }
        geoconvMain {
            dependsOn ioMain
            dependsOn bfMain
            dependsOn mathMain
            dependsOn utilsMain
        }
        mingwMain {
            dependsOn mathMain
            dependsOn ioMain
            dependsOn bfMain
            dependsOn glMain
            dependsOn mathMain
            dependsOn utilsMain
        }
    }
}

kotlin.sourceSets.all {
    languageSettings {
        languageVersion = '1.3'
        apiVersion = '1.3'
        //enableLanguageFeature('InlineClasses') // language feature name
        useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name
        progressiveMode = true
    }
}

/* Workaround for broken relative paths in cinterop .def files */
task generateInterops(type: Copy) {
    from 'templates/cinterop'
    into 'src/nativeInterop/cinterop'
    filter { line -> line.replaceAll('@ROOT@', file('.').toString().replace("\\", "/")) }
}

/* command used to trigger build of native projects from gradle */
task buildNativeProjects(type: Exec) {
    workingDir '.'
    commandLine "bash", "./build_native_projects.sh"
}

task windowsResources(type: Exec) {
    def rcFile = file('kotgin.rc')
    def path = System.getenv("PATH")

    def windresDir = "$konanUserDir/dependencies/msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1/bin"

    commandLine "$windresDir/windres", '--use-temp-file', rcFile, '-O', 'coff', '-o', resFile
    environment 'PATH', "$windresDir;$path"

    inputs.file rcFile
    outputs.file resFile
}

/* Set-up dependencies */
project.tasks.matching {
    it.name.startsWith('compile')
}.all {
    // run windres only on windowses
    if (OperatingSystem.current().isWindows()) {
        it.dependsOn 'windowsResources'
    }
    it.dependsOn 'generateInterops'
    it.inputs.file resFile
}