plugins {
    id 'kotlin-multiplatform' version '1.3.0'
}
repositories {
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}

import org.gradle.internal.os.OperatingSystem

def konanUserDir = System.getenv("KONAN_DATA_DIR") ?: "${System.getProperty("user.home")}/.konan"
def resFile = file("$buildDir/konan/res/kogin.res")

kotlin {
    targets {
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64

        /* libraries */
        fromPreset(presets.mingwX64, 'math')
        fromPreset(presets.mingwX64, 'io')
        fromPreset(presets.mingwX64, 'utils')
        fromPreset(presets.mingwX64, 'bf')

        configure([bf]) {
            compilations.main {
                cinterops {
                    lz4 {
                    }
                }
            }
        }

        /* applications */
        fromPreset(presets.mingwX64, 'mingw')
        fromPreset(presets.mingwX64, 'imgconv')
        fromPreset(presets.mingwX64, 'geoconv')
        fromPreset(presets.mingwX64, 'bfinfo')

        configure([bfinfo]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'bfinfo.main'

            compilations.main {
                cinterops {
                }
                linkerOpts "$resFile"
            }
        }

        configure([imgconv]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'imgconv.main'

            compilations.main {
                cinterops {
                    stb {
                    }
                    lz4 {
                    }
                }
                linkerOpts "$resFile"
            }
        }

        configure([geoconv]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'geoconv.main'

            compilations.main {
                cinterops {
                    lz4 {
                    }
                }
                linkerOpts "$resFile"
            }
        }

        configure([mingw]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'sample.main'

            compilations.main {
                cinterops {
                    lz4 {
                    }
                    glfw {
                    }
                    galogen {
                    }
                }
                linkerOpts "$resFile"
            }
        }
    }
    sourceSets {
        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
        // in gradle.properties file and re-import your project in IDE.
        ioMain {
        }
        bfMain {
            dependsOn ioMain
        }
        bfinfoMain {
        }
        imgconvMain {
            dependsOn bfinfoMain
        }
        geoconvMain {
            dependsOn bfinfoMain
            dependsOn mathMain
        }
        mingwMain {
            dependsOn bfinfoMain
            dependsOn mathMain
        }
        mingwTest {
        }
    }
}

kotlin.sourceSets.all {
    languageSettings {
        languageVersion = '1.3'
        apiVersion = '1.3'
        //enableLanguageFeature('InlineClasses') // language feature name
        useExperimentalAnnotation('kotlin.ExperimentalUnsignedTypes') // annotation FQ-name
        progressiveMode = true
    }
}

/* Workaround for broken relative paths in cinterop .def files */
task generateInterops(type: Copy) {
    from 'templates/cinterop'
    into 'src/nativeInterop/cinterop'
    filter { line -> line.replaceAll('@ROOT@', file('.').toString().replace("\\", "/")) }
}

task buildNativeProjects {
    print("Using toolchain located at: " + System.getenv("NATIVE_TOOLCHAIN"))
    if(System.getenv("NATIVE_TOOLCHAIN") == null) throw new RuntimeException("Native toolchain cannot be null!")
    exec {
        workingDir '.'
        commandLine "${System.getenv("NATIVE_TOOLCHAIN")}/bin/bash.exe", "./build_all.sh"
    }
}

task runProgram {
    def buildType = 'release' // Change to 'debug' to run application with debug symbols.
    dependsOn "link${buildType.capitalize()}ExecutableMingw"
    doLast {
        def programFile = kotlin.targets.mingw.compilations.main.getBinary('EXECUTABLE', buildType)
        exec {
            executable programFile
            args ''
        }
    }
}

task debugProgram {
    def buildType = 'debug' // Change to 'debug' to run application with debug symbols.
    dependsOn "link${buildType.capitalize()}ExecutableMingw"
    doLast {
        def programFile = kotlin.targets.mingw.compilations.main.getBinary('EXECUTABLE', buildType)
        exec {
            executable 'C:\\cygwin64\\bin\\gdb.exe'
            args programFile
        }
    }
}

task windowsResources(type: Exec) {
    def rcFile = file('kotgin.rc')
    def path = System.getenv("PATH")

    def windresDir = "$konanUserDir/dependencies/msys2-mingw-w64-x86_64-gcc-7.3.0-clang-llvm-lld-6.0.1/bin"

    commandLine "$windresDir/windres", '--use-temp-file', rcFile, '-O', 'coff', '-o', resFile
    environment 'PATH', "$windresDir;$path"

    inputs.file rcFile
    outputs.file resFile
}

/* Set-up dependencies */
project.tasks.matching {
    it.name.startsWith('compile')
}.all {
    // run windres only on windowses
    if (OperatingSystem.current().isWindows()) {
        it.dependsOn 'windowsResources'
    }
    it.dependsOn 'generateInterops'
    it.inputs.file resFile
}