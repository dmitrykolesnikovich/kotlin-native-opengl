plugins {
    id 'kotlin-multiplatform' version '1.3.0-rc-190'
}
repositories {
    maven { url 'http://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
}

kotlin {
    targets {
        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        fromPreset(presets.mingwX64, 'mingw')
        fromPreset(presets.mingwX64, 'imgconv')
        fromPreset(presets.mingwX64, 'bfinfo')

        configure([bfinfo]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'bfinfo.main'

            compilations.main {
                cinterops {
                    lz4 {
                    }
                }
            }
        }

        configure([imgconv]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'imgconv.main'

            compilations.main {
                cinterops {
                    stb {
                    }
                    lz4 {
                    }
                }
            }
        }

        configure([mingw]) {
            compilations.main.outputKinds('EXECUTABLE')
            compilations.main.entryPoint = 'sample.main'

            compilations.main {
                cinterops {
                    lz4 {
                    }
                    glfw {
                    }
                    galogen {
                    }
                }
            }
        }
    }
    sourceSets {
        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
        // in gradle.properties file and re-import your project in IDE.
        bfinfoMain{
        }
        imgconvMain {
        }
        mingwMain {
        }
        mingwTest {
        }
    }
}

/* Workaround for broken relative paths in cinterop .def files */
task generateInterops(type: Copy) {
    from 'templates/cinterop'
    into 'src/nativeInterop/cinterop'
    filter { line -> line.replaceAll('@ROOT@', file('.').toString().replace("\\", "/")) }
}

task buildNativeProjects {
    generateInterops.execute()
}

task runProgram {
    def buildType = 'release' // Change to 'debug' to run application with debug symbols.
    dependsOn "link${buildType.capitalize()}ExecutableMingw"
    doLast {
        def programFile = kotlin.targets.mingw.compilations.main.getBinary('EXECUTABLE', buildType)
        exec {
            executable programFile
            args ''
        }
    }
}